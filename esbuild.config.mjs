import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

import {writeFile, readFile} from "fs/promises";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const test_build = process.argv[2] === "test" || process.argv[3] === "test";

let entry_point;
let outfile;
if (!test_build) {
    entry_point = "src/main.ts";
    outfile = "main.js";
} else {
    entry_point = "tests/main.test.ts";
    outfile = "main.test.js";
}

const context = await esbuild
    .context({
        banner: {
            js: banner,
        },
        entryPoints: [entry_point],
        bundle: true,
        external: [
            "obsidian",
            "electron",
            ...builtins,
        ],
        format: "cjs",
        target: "es2020",
        logLevel: "info",
        sourcemap: prod ? false : "inline",
        treeShaking: true,
        minify: prod,
        outdir: "dist",
        metafile: prod,
    });

if (prod) {
    const result = await context.rebuild();

    await writeFile("dist/meta.json", JSON.stringify(result.metafile, undefined, 2));
    process.exit(0);
} else {
    await context.watch();
}
